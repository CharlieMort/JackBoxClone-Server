{"version":3,"sources":["components/Countdown.tsx","components/Lobby.tsx","components/HostGame.tsx","components/ShowcaseMsgs.tsx","components/Showcase.tsx","components/MatchScreen.tsx","components/Matches.tsx","components/Leaderboard.tsx","components/NextRoundCard.tsx","components/HostScreen.tsx","components/JoinOptions.tsx","components/Game.tsx","components/JoinRoom.tsx","components/Nickname.tsx","components/Msgs.tsx","components/MsgWindow.tsx","components/PickMatch.tsx","components/PlayerScreen.tsx","sprites/alien.png","sprites/bear.png","sprites/brain.png","sprites/bruh.png","sprites/grimreaper.png","sprites/vampire.png","App.tsx","index.tsx"],"names":["Countdown","startTime","roomInfo","stage","nextStage","useState","countdown","setCountdown","countdownInterval","setCountdownInterval","useEffect","setInterval","prevCount","clearInterval","Lobby","icons","socket","className","players","map","player","idx","src","length","alt","nick","uuidv4","HostGame","started","onClick","emit","code","ShowcaseMsgs","msgIdx","setMsgIdx","msgInterval","setMsgInterval","prevIdx","showcaseConvo","msgs","slice","msg","recipiants","sender","txt","senderNick","v4","ref","el","scrollIntoView","Showcase","playerIdxs","setPlayerIdxs","undefined","idxs","i","id","recipiantsNicks","MatchScreen","Matches","matchOutcomes","match","outcome","Leaderboard","leaderBoard","score","NextRoundCard","round","HostScreen","console","log","JoinOptions","history","useHistory","choice","setChoice","push","type","value","Game","alerts","setAlerts","na","on","senderIdx","newAlerts","GoToConvo","JoinRoom","roomCode","setRoomCode","e","preventDefault","onSubmit","placeholder","onChange","target","autoFocus","Nickname","setNicked","setNick","Msgs","conversation","MsgWindow","setMsg","to","xmlns","viewBox","fill","fillRule","d","clipRule","conversations","convo","includes","PickMatch","matched","setMatched","Choose","PlayerScreen","nicked","path","exact","socketIO","App","alien","bear","brain","bruh","grimreaper","vampire","setRoomInfo","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c29de0b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    startTime: number,\r\n    roomInfo: IRoom,\r\n    stage: string,\r\n    nextStage: string\r\n}\r\n\r\nexport const Countdown: React.FC<Props> = ({startTime, roomInfo, stage, nextStage}) => {\r\n    const [countdown, setCountdown] = useState<number>(startTime);\r\n    const [countdownInterval, setCountdownInterval] = useState<null | NodeJS.Timeout>(null);\r\n\r\n    useEffect(() => {\r\n        if (roomInfo.stage === stage && countdownInterval === null) {\r\n            setCountdownInterval(setInterval(() => {\r\n                setCountdown(prevCount => prevCount ?  prevCount - 1 : 0);\r\n            }, 1000))\r\n        }\r\n        if (roomInfo.stage === nextStage && countdownInterval !== null) {\r\n            clearInterval(countdownInterval);\r\n            setCountdownInterval(null);\r\n        }\r\n        return () => {\r\n            if (countdownInterval !== null) {\r\n                clearInterval(countdownInterval);\r\n                setCountdownInterval(null);\r\n            }\r\n        }\r\n    }, [roomInfo, countdownInterval]);\r\n\r\n    return(\r\n        <div>\r\n            <h1>{countdown}s Left</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    icons: string[],\r\n    socket: SocketIOClient.Socket\r\n}\r\n\r\nexport const Lobby: React.FC<Props> = ({roomInfo, icons, socket}) => {\r\n    return(\r\n        <div className=\"Lobby\">\r\n            <h1><b><u>Players</u></b></h1>\r\n            <div className=\"Players\">\r\n                {\r\n                    roomInfo.players.map((player, idx) => {\r\n                        return(\r\n                            <div className=\"PlayerIcon\" key={uuidv4()}>\r\n                                <img src={icons[idx%icons.length]} alt={`${player.nick}'s Icon`} />\r\n                                <h3>{player.nick}</h3>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { Countdown } from \"./Countdown\";\r\nimport { Lobby } from \"./Lobby\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket,\r\n    icons: string[]\r\n}\r\n\r\nexport const HostGame: React.FC<Props> = ({roomInfo, socket, icons}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                roomInfo.started \r\n                ? <Countdown startTime={20} roomInfo={roomInfo} stage=\"game\" nextStage=\"matches\" />\r\n                :\r\n                    roomInfo.players.length >= 2\r\n                    ? <button onClick={() => socket.emit(\"StartGame\", roomInfo.code)}>Start Game?</button>\r\n                    : <h3>Not Enough Players To Start</h3>\r\n            }\r\n            <Lobby roomInfo={roomInfo} icons={icons} socket={socket} />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket\r\n}\r\n\r\nexport const ShowcaseMsgs: React.FC<Props> = ({roomInfo, socket}) => {\r\n    const [msgIdx, setMsgIdx] = useState<number>(0);\r\n    const [msgInterval, setMsgInterval] = useState<null | NodeJS.Timeout>(null);\r\n\r\n    useEffect(() => {\r\n        setMsgInterval(setInterval(() => {\r\n            setMsgIdx(prevIdx => prevIdx + 1);\r\n        }, 2000))\r\n\r\n        return () => {\r\n            if (msgInterval !== null) clearInterval(msgInterval);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (msgIdx > roomInfo.showcaseConvo.msgs.length) {\r\n            if (msgInterval !== null) clearInterval(msgInterval);\r\n        }\r\n    }, [msgIdx])\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() => socket.emit(\"ToMatchShowcase\", roomInfo.code)}>Matches</button>\r\n            <div className=\"Conversation\">\r\n                {\r\n                    roomInfo.showcaseConvo.msgs.slice(0, msgIdx).map((msg) => {\r\n                        return(\r\n                            <div className={`Msg ${roomInfo.showcaseConvo.recipiants[0] === msg.sender ? \"mine\" : \"theirs\"}`} key={v4()}>\r\n                                <h2 className=\"Msg-txt\">{msg.txt}</h2>\r\n                                <h4 className=\"Msg-sender\">From {msg.senderNick}</h4>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div ref={el => el?.scrollIntoView()} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { ShowcaseMsgs } from \"./ShowcaseMsgs\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket,\r\n    icons: string[]\r\n}\r\n\r\nexport const Showcase: React.FC<Props> = ({roomInfo, socket, icons}) => {\r\n    const [playerIdxs, setPlayerIdxs] = useState([0,0]);\r\n    \r\n    useEffect(() => {\r\n        if (roomInfo.showcaseConvo !== undefined) {\r\n            let idxs = [0,0];\r\n            for (let i = 0; i<roomInfo.players.length; i++) {\r\n                if (roomInfo.showcaseConvo.recipiants[0] === roomInfo.players[i].id) {\r\n                    idxs[0] = i;\r\n                }\r\n                else if (roomInfo.showcaseConvo.recipiants[1] === roomInfo.players[i].id) {\r\n                    idxs[1] = i;\r\n                }\r\n            }\r\n            setPlayerIdxs(idxs);\r\n        }\r\n    }, []);\r\n\r\n    if (roomInfo.showcaseConvo === undefined) return <h1>No One Msged Eachother and thats kinda cringe</h1>\r\n\r\n    return(\r\n        <div>\r\n            <h1>Showcase</h1>\r\n            <div className=\"Showcase-Icons-Wrapper\">\r\n                <div className=\"PlayerIcon\" key={v4()}>\r\n                    <img src={icons[playerIdxs[0]%icons.length]} alt={`${roomInfo.showcaseConvo.recipiantsNicks[0]}'s Icon`} />\r\n                    <h3>{roomInfo.showcaseConvo.recipiantsNicks[0]}</h3>\r\n                </div>\r\n                <div className=\"PlayerIcon\" key={v4()}>\r\n                    <img src={icons[playerIdxs[1]%icons.length]} alt={`${roomInfo.showcaseConvo.recipiantsNicks[1]}'s Icon`} />\r\n                    <h3>{roomInfo.showcaseConvo.recipiantsNicks[1]}</h3>\r\n                </div>\r\n            </div>\r\n            <ShowcaseMsgs roomInfo={roomInfo} socket={socket} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { Countdown } from \"./Countdown\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket\r\n}\r\n\r\nexport const MatchScreen: React.FC<Props> = ({roomInfo, socket}) => {\r\n    return(\r\n        <div>\r\n            <Countdown roomInfo={roomInfo} startTime={30} stage=\"matches\" nextStage=\"showcase\" />\r\n            <h1>Choose Your Match</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { v4 } from \"uuid\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket,\r\n    icons: string[]\r\n}\r\n\r\nexport const Matches: React.FC<Props> = ({roomInfo, socket, icons}) => {\r\n    return(\r\n        <div>\r\n            <button onClick={() => socket.emit(\"NextLeaderboard\", roomInfo.code)}>Next</button>\r\n            {\r\n                roomInfo.matchOutcomes.map((match, idx) => {\r\n                    return (\r\n                        <div className=\"Match\" key={v4()}>\r\n                            <div className=\"PlayerIcon\" key={v4()}>\r\n                                <img src={icons[match.players[0].idx%icons.length]} alt={`${match.players[0].nick}'s Icon`} />\r\n                                <h3>{match.players[0].nick}</h3>\r\n                            </div>\r\n                            <h1>{match.outcome}</h1>\r\n                            <div className=\"PlayerIcon\" key={v4()}>\r\n                                <img src={icons[match.players[1].idx%icons.length]} alt={`${match.players[1].nick}'s Icon`} />\r\n                                <h3>{match.players[1].nick}</h3>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket\r\n}\r\n\r\nexport const Leaderboard: React.FC<Props> = ({roomInfo, socket}) => {\r\n    return(\r\n        <div>\r\n            <button onClick={() => socket.emit(\"NextStage\", roomInfo.code)}>Next</button>\r\n            <ol>\r\n            {\r\n                roomInfo.leaderBoard.map((player, idx) => {\r\n                    return(\r\n                        <li key={v4()}>\r\n                            {player.nick}: {player.score} {\"<3\"}\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    socket: SocketIOClient.Socket,\r\n    roomInfo: IRoom\r\n}\r\n\r\nexport const NextRoundCard: React.FC<Props> = ({socket, roomInfo}) => {\r\n    return(\r\n        <div>\r\n            <h1>Round {roomInfo.round + 1}</h1>\r\n            <button onClick={() => socket.emit(\"NextRound\", roomInfo.code)}>Onwards</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { Lobby } from \"./Lobby\";\r\nimport { Countdown } from \"./Countdown\";\r\nimport { HostGame } from \"./HostGame\";\r\nimport { Showcase } from \"./Showcase\";\r\nimport { MatchScreen } from \"./MatchScreen\";\r\nimport { Matches } from \"./Matches\";\r\nimport { Leaderboard } from \"./Leaderboard\";\r\nimport { NextRoundCard } from \"./NextRoundCard\";\r\n\r\ninterface Props {\r\n    socket: SocketIOClient.Socket,\r\n    roomInfo: IRoom,\r\n    icons: string[]\r\n}\r\n\r\nexport const HostScreen: React.FC<Props> = ({socket, roomInfo, icons}) => {\r\n    \r\n    console.log(roomInfo.stage);\r\n    return(\r\n        <div>\r\n            <h1>Host Screen</h1>\r\n            <h2>Room Code: {roomInfo.code}</h2>\r\n            {\r\n                (roomInfo.stage === \"game\" || roomInfo.stage === \"lobby\") && <HostGame icons={icons} roomInfo={roomInfo} socket={socket} />\r\n            }\r\n            {\r\n                roomInfo.stage === \"matches\" && <MatchScreen roomInfo={roomInfo} socket={socket} />\r\n            }\r\n            {\r\n                roomInfo.stage === \"showcase\" && <Showcase icons={icons} roomInfo={roomInfo} socket={socket} />\r\n            }\r\n            {\r\n                roomInfo.stage === \"match_showcase\" && <Matches icons={icons} roomInfo={roomInfo} socket={socket} />\r\n            }\r\n            {\r\n                roomInfo.stage === \"leaderboard\" && <Leaderboard roomInfo={roomInfo} socket={socket} />\r\n            }\r\n            {\r\n                roomInfo.stage === \"show_round\" && <NextRoundCard roomInfo={roomInfo} socket={socket} />\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    socket: SocketIOClient.Socket,\r\n    roomInfo: IRoom | undefined\r\n}\r\n\r\nexport const JoinOptions: React.FC<Props> = ({socket, roomInfo}) => {\r\n    const history = useHistory();\r\n    const [choice, setChoice] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        console.log(choice);\r\n        if (choice === \"host\") {\r\n            history.push(\"/host\");\r\n        }\r\n    }, [roomInfo])\r\n\r\n    const JoinRoom = () => {\r\n        history.push(\"/game\");\r\n    }\r\n\r\n    const CreateRoom = () => {\r\n        socket.emit(\"CreateRoom\");\r\n        setChoice(\"host\");\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <input type=\"button\" value=\"Join Room\" onClick={JoinRoom} />\r\n            <input type=\"button\" value=\"Host Room\" onClick={CreateRoom} />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket,\r\n    icons: string[]\r\n}\r\n\r\nexport const Game: React.FC<Props> = ({roomInfo, socket, icons}) => {\r\n    const [alerts, setAlerts] = useState<boolean[]>([false]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        let na: boolean[] = [];\r\n        for (let i = 0; i<roomInfo.players.length; i++) {\r\n            na.push(false);\r\n            setAlerts(na);\r\n        }\r\n        socket.on(\"NewMsg\", (senderIdx:number) => {\r\n            console.log(senderIdx);\r\n            let newAlerts = [];\r\n            for (let i = 0; i<roomInfo.players.length; i++) {\r\n                newAlerts.push(alerts[i] ? true : false);\r\n            }\r\n            newAlerts[senderIdx] = true;\r\n            setAlerts(newAlerts);\r\n        })\r\n    },[])\r\n\r\n    const GoToConvo = (idx:number) => {\r\n        let newAlerts = [...alerts];\r\n        newAlerts[idx] = false;\r\n        setAlerts(newAlerts);\r\n        history.push(`/game/${idx}`);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                roomInfo.stage === \"game\" &&\r\n                <div className=\"Players\">\r\n                    {\r\n                        roomInfo.players.map((player, idx) => {\r\n                            if (player.id === socket.id) return <></>;\r\n                            return(\r\n                                <button className=\"Icon-Btn\" onClick={() => GoToConvo(idx)}>\r\n                                    <div className=\"PlayerIcon\">\r\n                                        <img src={icons[idx%icons.length]} alt={`${player.nick}'s Icon`} />\r\n                                        <h3 className=\"Icon-Txt\">Message {player.nick}</h3>\r\n                                        {\r\n                                            alerts[idx] && <h3>New Msg</h3>\r\n                                        }\r\n                                    </div>\r\n                                </button>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n{\r\n    roomInfo.players.map((player: IPlayer) => {\r\n        return <Player roomInfo={roomInfo} player={player} socket={socket} roomCode={roomInfo.code} />\r\n    })\r\n}\r\n*/","import React, { useState } from \"react\";\r\n\r\ninterface Props {\r\n    socket: SocketIOClient.Socket\r\n}\r\n\r\nexport const JoinRoom: React.FC<Props> = ({socket}) => {\r\n    const [roomCode, setRoomCode] = useState(\"\");\r\n\r\n    const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setRoomCode(e.target.value);\r\n    }\r\n\r\n    const JoinRoom = (e:React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        socket.emit(\"JoinRoom\", roomCode);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={JoinRoom}>\r\n                <input type=\"text\" placeholder=\"Enter Room Code...\" onChange={onChange} value={roomCode} autoFocus={true} />\r\n                <input type=\"submit\" value=\"Join Room\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\n\r\ninterface Props {\r\n    socket: SocketIOClient.Socket,\r\n    setNicked: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const Nickname: React.FC<Props> = ({socket, setNicked}) => {\r\n    const [nick, setNick] = useState<string>(\"\");\r\n\r\n    const OnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNick(e.target.value);\r\n    }\r\n\r\n    const Submit = (e:React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        socket.emit(\"CreateNickname\", nick);\r\n        setNicked(true);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h3>Enter Nickname</h3>\r\n            <form onSubmit={Submit}>\r\n                <input type=\"text\" placeholder=\"Enter Nickname Here...\" onChange={OnChange} value={nick} autoFocus={true} />\r\n                <input type=\"button\" value=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { IConvo } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    conversation: IConvo,\r\n    id: string\r\n}\r\n\r\nexport const Msgs: React.FC<Props> = ({conversation, id}) => {\r\n    return(\r\n        <div className=\"Conversation\">\r\n            {\r\n                conversation.msgs.map((msg) => {\r\n                    return(\r\n                        <div className={`Msg ${id === msg.sender ? \"mine\" : \"theirs\"}`} key={v4()}>\r\n                            <h2 className=\"Msg-txt\">{msg.txt}</h2>\r\n                            <h4 className=\"Msg-sender\">From {msg.senderNick}</h4>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { Msgs } from \"./Msgs\";\r\nimport { IPlayer, IRoom } from \"../Interfaces\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    player: IPlayer,\r\n    socket: SocketIOClient.Socket,\r\n    icons: string[],\r\n    idx: number\r\n}\r\n\r\nexport const MsgWindow: React.FC<Props> = ({roomInfo, player, socket, icons, idx}) => {\r\n    const [msg, setMsg] = useState<string>();\r\n\r\n    const OnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMsg(e.target.value);\r\n    }\r\n\r\n    const Submit = (e:React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        setMsg(\"\");\r\n        socket.emit(\"SendMsg\", roomInfo.code, msg, player.id);\r\n    }\r\n\r\n    return(\r\n        <div className=\"Messages-Wrapper\">\r\n            <div className=\"Messages\">\r\n                <div className=\"Top-Banner\">\r\n                    <Link className=\"Home-Btn\" to=\"/game\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"Home-Icon\" viewBox=\"0 0 20 20\" fill=\"white\">\r\n                            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                    </Link>\r\n                    <img className=\"Msg-Icon\" src={icons[idx%icons.length]} alt={`${player.nick}'s Icon`} />\r\n                    <h2 className=\"Msg-Name\">{player.nick}</h2>\r\n                </div>\r\n                <div className=\"Player\">\r\n                    { // Loop through all the converstations\r\n                        roomInfo.conversations.map((convo) => {\r\n                            if (convo.recipiants.includes(socket.id) && convo.recipiants.includes(player.id)) {\r\n                                // This is the one that cotains us both *snuggles*\r\n                                return <Msgs conversation={convo} id={socket.id} key={v4()} />\r\n                            }\r\n                            return <></>\r\n                        })\r\n                    }\r\n                    <div>\r\n                        <form className=\"BottomBar\" onSubmit={Submit}>\r\n                            <input className=\"Msg-Box\" type=\"text\" autoFocus={true} placeholder=\"Enter Msg....\" value={msg} onChange={OnChange} />\r\n                            <input className=\"Send\" type=\"submit\" value=\"Send\" />\r\n                        </form>\r\n                    </div>\r\n                    <div ref={el => el?.scrollIntoView()} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { IRoom } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n    roomInfo: IRoom,\r\n    socket: SocketIOClient.Socket,\r\n    icons: string[]\r\n}\r\n\r\nexport const PickMatch: React.FC<Props> = ({roomInfo, socket, icons}) => {\r\n    const [matched, setMatched] = useState(false);\r\n\r\n    const Choose = (idx: number) => {\r\n        socket.emit(\"PickMatch\", idx, roomInfo.code);\r\n        setMatched(true);\r\n    }\r\n\r\n    if (matched) {\r\n        return(\r\n            <div>\r\n                <h1>Great You've Picked Your Match. Will They Match Back??</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Pick Someone To Match With</h1>\r\n            <div className=\"Players\">\r\n                {\r\n                    roomInfo.players.map((player, idx) => {\r\n                        if (player.id === socket.id) return <></>;\r\n                        return(\r\n                            <button className=\"Icon-Btn\" onClick={() => Choose(idx)}>\r\n                                <div className=\"PlayerIcon\">\r\n                                    <img src={icons[idx%icons.length]} alt={`${player.nick}'s Icon`} />\r\n                                    <h3 className=\"Icon-Txt\">Choose {player.nick}</h3>\r\n                                </div>\r\n                            </button>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { v4 } from \"uuid\";\r\nimport { Game } from \"./Game\";\r\nimport { IRoom } from \"../Interfaces\";\r\nimport { JoinRoom } from \"./JoinRoom\";\r\nimport { Nickname } from \"./Nickname\";\r\nimport { MsgWindow } from \"./MsgWindow\";\r\nimport { Matches } from \"./Matches\";\r\nimport { PickMatch } from \"./PickMatch\";\r\n\r\ninterface Props {\r\n    socket: SocketIOClient.Socket,\r\n    roomInfo: IRoom | undefined,\r\n    icons: string[]\r\n}\r\n\r\nexport const PlayerScreen: React.FC<Props> = ({socket, roomInfo, icons}) => {\r\n    const [nicked, setNicked] = useState<boolean>(false);\r\n\r\n    if (!nicked) return <Nickname socket={socket} setNicked={setNicked} />\r\n    if (!roomInfo) return <JoinRoom socket={socket} />\r\n\r\n    return(\r\n        <div>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/game\" exact>\r\n                        {\r\n                            roomInfo.started\r\n                                ? roomInfo.stage === \"game\" \r\n                                    ? <Game roomInfo={roomInfo} socket={socket} icons={icons} />\r\n                                    : roomInfo.stage === \"matches\"\r\n                                        ? <PickMatch icons={icons} roomInfo={roomInfo} socket={socket} />\r\n                                        : roomInfo.stage === \"match_showcase\"\r\n                                            ? <h1>Did Your Match Pick You Back???</h1>\r\n                                            : <h1>Look at host screen... Im gonna leek your dms</h1>\r\n                                : <h1>You Joined But The Game Hasnt Started Yet</h1>\r\n                        }\r\n                    </Route>\r\n                    {\r\n                        roomInfo.players.map((player, idx) => {\r\n                            return (\r\n                                <Route path={`/game/${idx}`} key={v4()}>\r\n                                    {   \r\n                                    roomInfo.stage === \"game\" \r\n                                        ? <MsgWindow icons={icons} idx={idx} player={player} roomInfo={roomInfo} socket={socket} />\r\n                                        : <Redirect to=\"/game\" />\r\n                                    }\r\n                                </Route>\r\n                            )\r\n                        })\r\n                    }\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/alien.33c2e6d4.png\";","export default __webpack_public_path__ + \"static/media/bear.7851eea3.png\";","export default __webpack_public_path__ + \"static/media/brain.a3f757a3.png\";","export default __webpack_public_path__ + \"static/media/bruh.ded5b09f.png\";","export default __webpack_public_path__ + \"static/media/grimreaper.c0611eb8.png\";","export default __webpack_public_path__ + \"static/media/vampire.966346d1.png\";","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport socketIO from \"socket.io-client\";\r\nimport { IRoom } from \"./Interfaces\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Redirect } from \"react-router\";\r\nimport { HostScreen } from './components/HostScreen';\r\nimport { JoinOptions } from './components/JoinOptions';\r\nimport { PlayerScreen } from './components/PlayerScreen';\r\nimport alien from \"./sprites/alien.png\";\r\nimport bear from \"./sprites/bear.png\";\r\nimport brain from \"./sprites/brain.png\";\r\nimport bruh from \"./sprites/bruh.png\";\r\nimport grimreaper from \"./sprites/grimreaper.png\";\r\nimport vampire from \"./sprites/vampire.png\";\r\n\r\nconst ENDPOINT: string = \"http://localhost:5000\";\r\nconst socket = socketIO(ENDPOINT);\r\n\r\nconst App: React.FC = () => {\r\n  const [icons] = useState([alien, bear, brain, bruh, grimreaper, vampire]);\r\n  const [roomInfo, setRoomInfo] = useState<IRoom>();\r\n\r\n  useEffect(() => {\r\n    socket.on(\"RoomInfo\", (data: IRoom) => {\r\n      console.log(data);\r\n      setRoomInfo(data);\r\n    })\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Liam uwu</h1> \r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <JoinOptions socket={socket} roomInfo={roomInfo} />\r\n          </Route>\r\n          <Route path=\"/game\">\r\n            <PlayerScreen socket={socket} roomInfo={roomInfo} icons={icons} />\r\n          </Route>\r\n          {\r\n            !roomInfo && <Redirect to=\"/\" />\r\n          }\r\n          <Route path=\"/host\">\r\n            {\r\n              roomInfo && <HostScreen socket={socket} roomInfo={roomInfo} icons={icons} />\r\n            }\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}